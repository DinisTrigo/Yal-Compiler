package Yal2Jvm;

/* Generated By:JJTree: Do not edit this line. Yal2Jvm.ASTIndex.java Version 4.3 */
 /* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
/**
 * Index expression generated by JJTree.
 * This node stores a variable name or an integer.
 * ASTIndex overrides the dump method from the SimpleNode class so it can introduce special behaviors for each. And introduces the new methods getIndex and getVarId.  
 */
public class ASTIndex extends SimpleNode
{
    /**
     * The variable that represents the index of the array if the index is given by another variable.
     */
    String id = null;
    /**
     * The variable that represents the index of the array if the index is given by a literal.
     */
    Integer index = null;

    /**
     * Constructor of the non-terminal expression 'Index'.
     * @param id ID of the node.
     */
    public ASTIndex(int id)
    {
        super(id);
    }

    /**
     * Constructor of the non-terminal expression 'Index'.
     * @param p Scanner object.
     * @param id ID of the node.
     */
    public ASTIndex(Scanner p, int id)
    {
        super(p, id);
    }

    /**
     * Displays information about this node. Correctly formats the information for more user-friendly reading on the console.
     * The method is overridden in the derived classes whenever special behaviour is necessary.
     * @param prefix The prefix (one or more spaces) to correctly format the information.
     */
    public void dump(String prefix)
    {
        String toPrint = "";
        System.out.println(toString(prefix) + toPrint);
        if (id != null)
        {
            System.out.println(prefix + "ID: " + id);
        }
        if (index != null)
        {
            System.out.println(prefix + "Index:" + index);
        }
        if (children != null)
        {
            for (int i = 0; i < children.length; ++i)
            {
                SimpleNode n = (SimpleNode) children[i];
                if (n != null)
                {
                    n.dump(prefix + " ");
                }
            }
        }
    }

    /**
     * Getter for the index (number). Represents the index that is being accessed.
     * @return An Integer object representing the index that is being accessed.
     */
    public Integer getIndex()
    {
        return index;
    }

    /**
     * Getter for the variable id (String). Represents the index that is being accessed.
     * @return A String object representing the index that is being accessed.
     */
    public String getVarId()
    {
        return id;
    }
}
/*
 * JavaCC - OriginalChecksum=01995fa7b074134d68e6a3e205f80547 (do not edit this
 * line)
 */
