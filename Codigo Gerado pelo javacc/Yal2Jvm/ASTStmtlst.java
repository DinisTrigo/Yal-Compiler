package Yal2Jvm;

import Yal2Jvm.CodeGeneration.IR.*;
import Yal2Jvm.CodeGeneration.IRFilling.StmtlstIRFiller;

/* Generated By:JJTree: Do not edit this line. Yal2Jvm.ASTStmtlst.java Version 4.3 */
 /* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
/**
 * Stmtlst expression generated by JJTree.
 * ASTStmtlst only overrides the fillIRSecondPass method so it can introduce special behavior.
 */
public class ASTStmtlst extends SimpleNode
{
    /**
     * Is responsible for filling the IR.
     */
    private final StmtlstIRFiller stmtlstIRFiller = new StmtlstIRFiller(this);
    /**
     * Constructor of the non-terminal expression 'Stmtlst'.
     * @param id ID of the node.
     */
    public ASTStmtlst(int id)
    {
        super(id);
    }
    /**
     * Constructor of the non-terminal expression 'Stmtlst'.
     * @param p Scanner object.
     * @param id ID of the node.
     */
    public ASTStmtlst(Scanner p, int id)
    {
        super(p, id);
    }

    /**
     * This method is called recursively to go through the entire AST to fill the intermediate representation (IR).
     * It is Overridden by this derived classes because special behaviour is needed. That special behaviour is implemented by the function fillIRSecondPass on the class StmtlstIRFiller.
     * It is placed in the AST because it needs to go through it. The code to perform the actual filling is placed in different classes, respecting the single responsibility principle.
     * On the first pass, only function definitions are filled in the intermediate representation. Function bodies will be filled in the second pass.
     * @param st An Object that represents the already filled symbol table.
     * @param irContainer A class representing the intermediate representation to be filled.
     * @param currentBlock A class representing the current block on the IR of this AST node. This is used to perform branching on certain conditions.
     */
    public void fillIRSecondPass(ST st, IRContainer irContainer, BasicBlock currentBlock)
    {
        stmtlstIRFiller.fillIRSecondPass(st, irContainer, currentBlock);
    }
}
/*
 * JavaCC - OriginalChecksum=ccb74d6c493c2f87bb1962e6dd434a67 (do not edit this
 * line)
 */
