package Yal2Jvm;

import Yal2Jvm.CodeGeneration.IR.Operand;
import Yal2Jvm.CodeGeneration.IRFilling.ScalarAccessIRFiller;

/* Generated By:JJTree: Do not edit this line. Yal2Jvm.ASTArraySize.java Version 4.3 */
 /* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
/**
 * ArraySize expression generated by JJTree.
 * This node stores the size of an array.
 * ASTArraySize only overrides the dump method and adds a the getOperand method.
 */
public class ASTArraySize extends SimpleNode
{
    /**
     * The value used to initialize the size of the array. Can be null if it was used a scalar access instead of a constant.
     */
    public Integer sizeArray;

    /**
     * Constructor of the non-terminal expression 'ArraySize'.
     * @param id ID of the node.
     */
    public ASTArraySize(int id)
    {
        super(id);
    }
    /**
     * Constructor of the non-terminal expression 'ArraySize'.
     * @param p Scanner object.
     * @param id ID of the node.
     */
    public ASTArraySize(Scanner p, int id)
    {
        super(p, id);
    }

    /**
     * Displays information about this node. Correctly formats the information for more user-friendly reading on the console.
     * The method is overridden in the derived classes whenever special behaviour is necessary.
     * @param prefix The prefix (one or more spaces) to correctly format the information.
     */
    public void dump(String prefix)
    {
        System.out.println(toString(prefix));
        if (sizeArray != null)
        {
            System.out.println(prefix + "Array Size:" + sizeArray);
        }
        if (children != null)
        {
            for (int i = 0; i < children.length; ++i)
            {
                SimpleNode n = (SimpleNode) children[i];
                if (n != null)
                {
                    n.dump(prefix + " ");
                }
            }
        }
    }

    public Operand getOperand(ST st)
    {
        if (sizeArray != null)
            return new Operand(sizeArray.toString(), false, false, false);
        else
        {
            ASTScalarAccess arraySize = (ASTScalarAccess) children[0];
            return ScalarAccessIRFiller.getOperand(arraySize, st);
        }
    }
}
/*
 * JavaCC - OriginalChecksum=3eb1db9433d1676ae8d0156a846d5176 (do not edit this
 * line)
 */
