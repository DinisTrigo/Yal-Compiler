package Yal2Jvm;

import Yal2Jvm.CodeGeneration.IR.IRContainer;
import Yal2Jvm.CodeGeneration.IRFilling.VarlistIRFiller;
import Yal2Jvm.SemanticAnalysis.STFilling.VarlistSTFiller;

/* Generated By:JJTree: Do not edit this line. Yal2Jvm.ASTVarlist.java Version 4.3 */
 /* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
/**
 * Varlist expression generated by JJTree.
 * ASTVarlist overrides the fillStFirstPass, and fillIRFirstPass methods from the SimpleNode class so it can introduce special behaviors for each.
 */
public class ASTVarlist extends SimpleNode
{
    /**
     * Is responsible for filling the symbol table.
     */
    private final VarlistSTFiller varlistSTFiller = new VarlistSTFiller(this);
    /**
     * Is responsible for filling the IR.
     */
    private final VarlistIRFiller varlistIRFiller = new VarlistIRFiller(this);
    /**
     * Constructor of the non-terminal expression 'Varlist'.
     * @param id ID of the node.
     */
    public ASTVarlist(int id)
    {
        super(id);
    }
    /**
     * Constructor of the non-terminal expression 'Varlist'.
     * @param p Scanner object.
     * @param id ID of the node.
     */
    public ASTVarlist(Scanner p, int id)
    {
        super(p, id);
    }

    /**
     * This method is called recursively to go through the entire AST to fill the symbol table.
     * It is Overridden by the derived classes when special behaviour is needed.
     * It is placed in the AST because it needs to go through it. The code to perform the actual filling and necessary semantic analysis is placed in different classes, respecting the single responsibility principle.
     * On the first pass, only function definitions are filled in the symbol table. Function bodies will be filled in the second pass.
     * @param st An Object that represents the symbol table to be filled.
     */
    public void fillStFirstPass(ST st)
    {
        varlistSTFiller.fillStFirstPass(st);
    }

    /**
     * This method is called recursively to go through the entire AST to fill the intermediate representation (IR).
     * It is Overridden by this derived classes because special behaviour is needed. That special behaviour is implemented by the function fillIRSecondPass on the class VarlistIRFiller.
     * It is placed in the AST because it needs to go through it. The code to perform the actual filling is placed in different classes, respecting the single responsibility principle.
     * On the first pass, only function definitions are filled in the intermediate representation. Function bodies will be filled in the second pass.
     * @param st An Object that represents the already filled symbol table.
     * @param irContainer A class representing the intermediate representation to be filled.
     */
    public void fillIRFirstPass(ST st, IRContainer irContainer)
    {
        varlistIRFiller.fillIRFirstPass(st, irContainer);
    }
}
/*
 * JavaCC - OriginalChecksum=cc94bfc33509973edf6ebec00639b4cf (do not edit this
 * line)
 */
