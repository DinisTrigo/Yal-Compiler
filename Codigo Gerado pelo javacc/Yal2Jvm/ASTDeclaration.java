package Yal2Jvm;

import Yal2Jvm.CodeGeneration.IR.IRContainer;
import Yal2Jvm.CodeGeneration.IRFilling.DeclarationIRFiller;
import Yal2Jvm.SemanticAnalysis.InitializationVerifier.DeclarationInitializationVerifier;
import Yal2Jvm.SemanticAnalysis.STFilling.DeclarationSTFiller;

import java.util.HashSet;

/* Generated By:JJTree: Do not edit this line. Yal2Jvm.ASTDeclaration.java Version 4.3 */
 /* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
/**
 * Declaration expression generated by JJTree.
 * ASTDeclaration overrides the dump, fillStFirstPass, verifyInitialization and fillIRFirstPass methods from the SimpleNode class so it can introduce special behaviors for each. And it adds the function getAssignValue.
 */
public class ASTDeclaration extends SimpleNode
{
    /**
     * Is responsible for filling the symbol table.
     */
    private final DeclarationSTFiller declarationSTFiller = new DeclarationSTFiller(this);
    /**
     * Is responsible for verifying the initialization of variables.
     */
    private final DeclarationInitializationVerifier declarationInitializationVerifier = new DeclarationInitializationVerifier(this);
    /**
     * Is responsible for filling the IR.
     */
    private final DeclarationIRFiller declarationIRFiller = new DeclarationIRFiller(this);
    /**
     * The sign of the global variable. Can be null if no sign was specified.
     */
    public String addSubOp = "";
    /**
     * The literal assigned to the global variable. Can be null if the global variable is an array or wasn't initialized.
     */
    public Integer assignValue;
    /**
     * Constructor of the non-terminal expression 'Declaration'.
     * @param id ID of the node.
     */
    public ASTDeclaration(int id)
    {
        super(id);
    }
    /**
     * Constructor of the non-terminal expression 'Declaration'.
     * @param p Scanner object.
     * @param id ID of the node.
     */
    public ASTDeclaration(Scanner p, int id)
    {
        super(p, id);
    }

    /**
     * Displays information about this node. Correctly formats the information for more user-friendly reading on the console.
     * The method is overridden in the derived classes whenever special behaviour is necessary.
     * @param prefix The prefix (one or more spaces) to correctly format the information.
     */
    public void dump(String prefix)
    {
        System.out.println(toString(prefix));
        System.out.println(prefix + "ADDSUB OP:" + addSubOp);
        System.out.println(prefix + "Assign Value:" + assignValue);
        if (children != null)
        {
            for (int i = 0; i < children.length; ++i)
            {
                SimpleNode n = (SimpleNode) children[i];
                if (n != null)
                {
                    n.dump(prefix + " ");
                }
            }
        }
    }

    /**
     * This method is called recursively to go through the entire AST to fill the symbol table.
     * It is Overridden by this derived classes because special behaviour is needed. That special behaviour is implemented by the function fillStFirstPass on the class DeclarationSTFiller.
     * It is placed in the AST because it needs to go through it. The code to perform the actual filling and necessary semantic analysis is placed in different classes, respecting the single responsibility principle.
     * On the first pass, only function definitions are filled in the symbol table. Function bodies will be filled in the second pass.
     * @param st An Object that represents the symbol table to be filled.
     */
    @Override
    public void fillStFirstPass(ST st)
    {
        declarationSTFiller.fillStFirstPass(st);
    }

    /**
     * This method is called recursively to go through the entire AST verify the variable initialization.
     * It is Overridden by this derived classes because special behaviour is needed. That special behaviour is implemented by the function verifyInitialization on the class DeclarationInitializationVerifier.
     * It is placed in the AST because it needs to go through it. The code to perform the actual verification of the variable initialization is placed in different classes, respecting the single responsibility principle.
     * @param initializedVariables A set containing the currently initialized variables (in the current node of the AST). As new variables get initialized, they are added to the set.
     * @param st An Object that represents the already filled symbol table.
     * @return The set of initialized variables after the current AST node (new variables could eventually have been added to the set it received as parameter if they actually for initialized in the current AST node).
     */
    public HashSet verifyInitialization(HashSet<String> initializedVariables, ST st)
    {
        return declarationInitializationVerifier.verifyInitialization(initializedVariables, st);
    }

    /**
     * This method is called recursively to go through the entire AST to fill the intermediate representation (IR).
     * It is Overridden by this derived classes because special behaviour is needed. That special behaviour is implemented by the function fillIRFirstPass on the class DeclarationIRFiller.
     * It is placed in the AST because it needs to go through it. The code to perform the actual filling is placed in different classes, respecting the single responsibility principle.
     * On the first pass, only function definitions are filled in the intermediate representation. Function bodies will be filled in the second pass.
     * @param st An Object that represents the already filled symbol table.
     * @param irContainer A class representing the intermediate representation to be filled.
     */
    public void fillIRFirstPass(ST st, IRContainer irContainer)
    {
        declarationIRFiller.fillIRFirstPass(st, irContainer);
    }

    public Integer getAssignValue()
    {
        return assignValue;
    }
}
/*
 * JavaCC - OriginalChecksum=447acaf2db2f09add11e83ab9f44f1ed (do not edit this
 * line)
 */
