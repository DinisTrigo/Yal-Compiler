package Yal2Jvm;

/* Generated By:JJTree: Do not edit this line. Yal2Jvm.ASTRhs.java Version 4.3 */
 /* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */

/**
 * Rhs expression generated by JJTree.
 * This node stores an operation symbol.
 * ASTRhs overrides the dump and verifyOperatorSyntax methods from the SimpleNode class so it can introduce special behaviors for each. And introduces the new methods returnIsArray and getOp.  
 */
public class ASTRhs extends SimpleNode
{
    /**
     * The operand of the arithmetic or bitwise expression. If there is only one term in the right hand side, the operand doesn't exist,
     * therefore, has the value NULL.
     */
    public String op = null;
    /**
     * Constructor of the non-terminal expression 'Rhs'.
     * @param id ID of the node.
     */
    public ASTRhs(int id)
    {
        super(id);
    }
    /**
     * Constructor of the non-terminal expression 'Rhs'.
     * @param p Scanner object.
     * @param id ID of the node.
     */
    public ASTRhs(Scanner p, int id)
    {
        super(p, id);
    }

    /**
     * Displays information about this node. Correctly formats the information for more user-friendly reading on the console.
     * The method is overridden in the derived classes whenever special behaviour is necessary.
     * @param prefix The prefix (one or more spaces) to correctly format the information.
     */
    public void dump(String prefix)
    {
        System.out.println(toString(prefix));
        if (op != null)
        {
            System.out.println(prefix + "Operator:" + op);
        }
        if (children != null)
        {
            for (int i = 0; i < children.length; ++i)
            {
                SimpleNode n = (SimpleNode) children[i];
                if (n != null)
                {
                    n.dump(prefix + " ");
                }
            }
        }
    }

    /**
     * This function allows to check weather this ASTRhs node returns an array or not (int if not array).
     * @param st An Object that represents the already filled symbol table.
     * @return A boolean value indicating weather this ASTRhs node returns an array or not (int if not array).
     * @throws ExternalModuleCall Exception thrown when this ASTRhs contains an external module call.
     */
    public Boolean returnIsArray(ST st) throws ExternalModuleCall
    {
        if (children[0] instanceof ASTTerm)
            return ((ASTTerm) children[0]).returnIsArray(st);
        else
            return true;
    }

    /**
     * This method is called recursively to go through the entire AST verify the variable initialization.
     * It is Overridden by this derived classes because special behaviour is needed. That special behaviour is implemented by this function since there's no need ot specialized class because it is only four lines of code.
     * It is placed in the AST because it needs to go through it. The code to perform the actual verification of the variable initialization is placed in different classes, respecting the single responsibility principle.
     * @param st An Object that represents the already filled symbol table.
     * @param operatorHasToBeInt A boolean indicating weather the next operator found has to be an int or not.
     */
    public void verifyOperatorSyntax(ST st, boolean operatorHasToBeInt)
    {
        if (children.length == 1 && children[0] instanceof ASTTerm)
            ((ASTTerm) children[0]).verifyOperatorSyntax(st, false);
        else
            super.verifyOperatorSyntax(st, true);
    }

    public String getOp()
    {
        return op;
    }
}
/*
 * JavaCC - OriginalChecksum=ae10de9e4b9d9b660366e2287b91e1eb (do not edit this
 * line)
 */
