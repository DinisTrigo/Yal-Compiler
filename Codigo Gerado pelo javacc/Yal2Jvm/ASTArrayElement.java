package Yal2Jvm;

import Yal2Jvm.SemanticAnalysis.STFilling.ArrayElementSTFiller;

/* Generated By:JJTree: Do not edit this line. Yal2Jvm.ASTArrayElement.java Version 4.3 */
 /* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
/**
 * ArrayElement expression generated by JJTree.
 * This node store the name of an array.
 * ASTArrayElement only overrides the dump and fillStFirstPass methods so it can introduce special behavior.
 */
public class ASTArrayElement extends SimpleNode
{
    /**
     * Is responsible for filling the symbol table.
     */
    private final ArrayElementSTFiller arrayElementSTFiller = new ArrayElementSTFiller(this);
    /**
     * The id of the array element.
     */
    public String arrayID;

    /**
     * Constructor of the non-terminal expression 'ArrayElement'.
     * @param id ID of the node.
     */
    public ASTArrayElement(int id)
    {
        super(id);
    }
    /**
     * Constructor of the non-terminal expression 'ArrayElement'.
     * @param p Scanner object.
     * @param id ID of the node.
     */
    public ASTArrayElement(Scanner p, int id)
    {
        super(p, id);
    }

    /**
     * Getter for the attribute arrayID.
     * @return A String representing the attribute arrayID.
     */
    public String getArrayID()
    {
        return arrayID;
    }

    /**
     * Displays information about this node. Correctly formats the information for more user-friendly reading on the console.
     * The method is overridden in the derived classes whenever special behaviour is necessary.
     * @param prefix The prefix (one or more spaces) to correctly format the information.
     */
    public void dump(String prefix)
    {
        System.out.println(toString(prefix));
        System.out.println(prefix + "Array ID:" + arrayID);
    }

    /**
     * This method is called recursively to go through the entire AST to fill the symbol table.
     * It is Overridden by this derived classes because special behaviour is needed. That special behaviour is implemented by the function fillStFirstPass on the class ArrayElementSTFiller.
     * It is placed in the AST because it needs to go through it. The code to perform the actual filling and necessary semantic analysis is placed in different classes, respecting the single responsibility principle.
     * On the first pass, only function definitions are filled in the symbol table. Function bodies will be filled in the second pass.
     * @param st An Object that represents the symbol table to be filled.
     */
    @Override
    public void fillStFirstPass(ST st)
    {
        arrayElementSTFiller.fillStFirstPass(st);
        super.fillStFirstPass(st);
    }
}
/*
 * JavaCC - OriginalChecksum=e225cf0b97746844d44168772bf1dd36 (do not edit this
 * line)
 */
