/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. yal2jvm.jj */
/*@egen*/options
{
  LOOKAHEAD= 1;

               
  STATIC = false;
}

PARSER_BEGIN(Scanner)
import java.io.*;

public class Scanner/*@bgen(jjtree)*/implements ScannerTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTScannerState jjtree = new JJTScannerState();

/*@egen*/
  private static boolean parse_error = false;

  public static void main(String [] args) throws FileNotFoundException, ParseException
  {
    InputStream file = new FileInputStream("test.yal");
    Scanner s = new Scanner(file);
    SimpleNode root = s.Module();
    if (!parse_error) 
    root.dump("");
  }
}

PARSER_END(Scanner)

< DEFAULT >
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      "*"
    | ~[ "*", "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}

/* reserved words */
< DEFAULT >
TOKEN :
{
  < RELA_OP :
    ">"
  | "<"
  | "<="
  | ">="
  | "=="
  | "!=" >
| < ADDSUB_OP :
    "+"
  | "-" >
| < ARITH_OP :
    "*"
  | "/"
  | "<<"
  | ">>"
  | ">>>" >
| < BITWISE_OP :
    "&"
  | "|"
  | "^" >
| < NOT_OP : "!" >
| < WHILE : "while" >
| < IF : "if" >
| < ELSE : "else" >
| < ASSIGN : "=" >
| < ASPA : "\"" >
| < LPAR : "(" >
| < RPAR : ")" >
| < VIRG : "," >
| < PVIRG : ";" >
| < LCHAVETA : "{" >
| < RCHAVETA : "}" >
| < FUNCTION : "function" >
| < MODULE : "module" >
| < SIZE : "size" >
}

< DEFAULT >
TOKEN :
{
  < INTEGER : (< DIGIT >)+ >
| < ID :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| < #LETTER : [ "$", "A"-"Z", "_", "a"-"z" ] >
| < #DIGIT : [ "0"-"9" ] >
| < STRING : "\"" ([ "a"-"z", "A"-"Z", "0"-"9", ":", " ", "=" ])+ "\"" >
}

SimpleNode Module() :
{/*@bgen(jjtree) Module */
  ASTModule jjtn000 = new ASTModule(JJTMODULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token moduleName;
}
{/*@bgen(jjtree) Module */
  try {
/*@egen*/
  try
  {
    < MODULE > moduleName = < ID > < LCHAVETA >
    {
      jjtn000.moduleName = moduleName.image;
    }      
    (
      Declaration()
    )*
    (
      Function()
    )*
    < RCHAVETA >
  }
  catch (ParseException e)
  {
    System.out.println("Module Err:" + e.toString());
  }/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Declaration() :
{/*@bgen(jjtree) Declaration */
  ASTDeclaration jjtn000 = new ASTDeclaration(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t1;
  Token op;
}
{/*@bgen(jjtree) Declaration */
  try {
/*@egen*/
  (
    LOOKAHEAD(2)
    ArrayElement()
  | ScalarElement()
    )
    try
    {
      (< ASSIGN > (("[" ArraySize() "]")
    | (op = < ADDSUB_OP >
      {
        jjtn000.addSubOp = op.image;
      }
      ) ? t1 = < INTEGER >
      {
        jjtn000.assignValue = Integer.parseInt(t1.image);
      }
      )) ? < PVIRG >
    }
    catch (ParseException e)
    {
      System.out.println("Declaration Err on right hand side of equal sign:" + e.toString());
      Token t;
      do
      {
        t = getNextToken();
      }
      while (t.kind != PVIRG);
    }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
  }

  void Function() :
  {/*@bgen(jjtree) Function */
    ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token funcID;
  }
  {/*@bgen(jjtree) Function */
    try {
/*@egen*/
    try
    {
      (LOOKAHEAD(3)
      (< FUNCTION > (LOOKAHEAD(2)
      ArrayElement()
    | ScalarElement()) < ASSIGN > funcID = < ID >
      {
        jjtn000.functionId = funcID.image;
      }
      < LPAR > (LOOKAHEAD(2)
      Varlist()) ? < RPAR >)
    | (< FUNCTION > funcID = < ID >
      {
        jjtn000.functionId = funcID.image;
      }
      < LPAR > (Varlist()) ? < RPAR >))
    }
    catch (ParseException e)
    {
      System.out.println("Function Err:" + e.toString());
      Token t;
      do
      {
        t = getNextToken();
      }
      while (t.kind != RPAR);
    }
    try
    {
      < LCHAVETA > Stmtlst() < RCHAVETA >
    }
    catch (ParseException e)
    {
      System.out.println("Function Err:" + e.toString());
      Token t;
      do
      {
        t = getNextToken();
      }
      while (t.kind != RCHAVETA);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
  }

  void Varlist() :
  {/*@bgen(jjtree) Varlist */
  ASTVarlist jjtn000 = new ASTVarlist(JJTVARLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
  {/*@bgen(jjtree) Varlist */
    try {
/*@egen*/
    try
    {
      (LOOKAHEAD(2)
      ArrayElement()
    | ScalarElement()) (< VIRG > (LOOKAHEAD(2)
      ArrayElement()
    | ScalarElement())) *
    }
    catch (ParseException e)
    {
      System.out.println("Varlist Err:" + e.toString());
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
  }

  void ArrayElement() :
  {/*@bgen(jjtree) ArrayElement */
    ASTArrayElement jjtn000 = new ASTArrayElement(JJTARRAYELEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token arrayID;
  }
  {/*@bgen(jjtree) ArrayElement */
    try {
/*@egen*/
    try
    {
      arrayID = < ID > "[" "]"
      {
        jjtn000.arrayID = arrayID.image;
      }
    }
    catch (ParseException e)
    {
      System.out.println("ArrayElement Err:" + e.toString());
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
  }

  void ScalarElement() :
  {/*@bgen(jjtree) ScalarElement */
    ASTScalarElement jjtn000 = new ASTScalarElement(JJTSCALARELEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token scalarID;
  }
  {/*@bgen(jjtree) ScalarElement */
    try {
/*@egen*/
    try
    {
      scalarID = < ID >
      {
        jjtn000.scalarID = scalarID.image;
      }
    }
    catch (ParseException e)
    {
      System.out.println("ScalarElement Err:" + e.toString());
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
  }

  void Stmtlst() :
  {/*@bgen(jjtree) Stmtlst */
  ASTStmtlst jjtn000 = new ASTStmtlst(JJTSTMTLST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
  {/*@bgen(jjtree) Stmtlst */
    try {
/*@egen*/
    try
    {
      (Stmt()) *
    }
    catch (ParseException e)
    {
      System.out.println("Stmtlst Err:" + e.toString());
      Token t;
      do
      {
        t = getNextToken();
      }
      while (t.kind != PVIRG);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
  }

  void Stmt() :
  {/*@bgen(jjtree) Stmt */
  ASTStmt jjtn000 = new ASTStmt(JJTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
  {/*@bgen(jjtree) Stmt */
    try {
/*@egen*/
    try
    {
      While()
    | If()
    | LOOKAHEAD(3)
      Assign()
    | Call() < PVIRG >
    }
    catch (ParseException e)
    {
      System.out.println("Stmt Err:" + e.toString());
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
  }

  void Assign() :
  {/*@bgen(jjtree) Assign */
  ASTAssign jjtn000 = new ASTAssign(JJTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
  {/*@bgen(jjtree) Assign */
    try {
/*@egen*/
    try
    {
      Lhs() < ASSIGN > Rhs() < PVIRG >
    }
    catch (ParseException e)
    {
      System.out.println("Assign Err:" + e.toString());
      Token t;
      do
      {
        t = getNextToken();
      }
      while (t.kind != PVIRG);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
  }

  void Lhs() :
  {/*@bgen(jjtree) Lhs */
  ASTLhs jjtn000 = new ASTLhs(JJTLHS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
  {/*@bgen(jjtree) Lhs */
    try {
/*@egen*/
    try
    {
      (LOOKAHEAD(2)
      ArrayAccess()
    | ScalarAccess())
    }
    catch (ParseException e)
    {
      System.out.println("Lhs Err:" + e.toString());
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
  }

  void Rhs() :
  {/*@bgen(jjtree) Rhs */
    ASTRhs jjtn000 = new ASTRhs(JJTRHS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token op;
  }
  {/*@bgen(jjtree) Rhs */
    try {
/*@egen*/
    try
    {
      (Term() ((LOOKAHEAD(3)
      op = < ARITH_OP >
      {
        jjtn000.op = op.image;
      }
    | op = < BITWISE_OP >
      {
        jjtn000.op = op.image;
      }
    | op = < ADDSUB_OP >
      {
        jjtn000.op = op.image;
      }
      ) Term()) ?)
    | "[" ArraySize() "]"
    }
    catch (ParseException e)
    {
      System.out.println("Rhs Err:" + e.toString());
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
  }

  void ArraySize() :
  {/*@bgen(jjtree) ArraySize */
    ASTArraySize jjtn000 = new ASTArraySize(JJTARRAYSIZE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t1;
  }
  {/*@bgen(jjtree) ArraySize */
    try {
/*@egen*/
    try
    {
      ScalarAccess()
    | t1 = < INTEGER >
      {
        jjtn000.sizeArray = Integer.parseInt(t1.image);
      }
    }
    catch (ParseException e)
    {
      System.out.println("ArraySize Err:" + e.toString());
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
  }

  void Term() :
  {/*@bgen(jjtree) Term */
    ASTTerm jjtn000 = new ASTTerm(JJTTERM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t1, t2;
  }
  {/*@bgen(jjtree) Term */
    try {
/*@egen*/
    try
    {
      (t1 = < ADDSUB_OP >
      {
        jjtn000.addSub_Op = t1.image;
      }
      ) ? (t2 = < INTEGER >
      {
        jjtn000.termInt = Integer.parseInt(t2.image);
      }
    | LOOKAHEAD(3)
      Call()
    | LOOKAHEAD(3)
      ArrayAccess()
    | ScalarAccess())
    }
    catch (ParseException e)
    {
      System.out.println("Term Err:" + e.toString());
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
  }

  void Exprtest() :
  {/*@bgen(jjtree) Exprtest */
    ASTExprtest jjtn000 = new ASTExprtest(JJTEXPRTEST);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t1;
  }
  {/*@bgen(jjtree) Exprtest */
    try {
/*@egen*/
    try
    {
      < LPAR > Lhs() t1 = < RELA_OP >
      {
        jjtn000.rela_Op = t1.image;
      }
      Rhs() < RPAR >
    }
    catch (ParseException e)
    {
      System.out.println("Exprtest Err:" + e.toString());
      Token t;
      do
      {
        t = getNextToken();
      }
      while (t.kind != RPAR);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
  }

  void While() :
  {/*@bgen(jjtree) While */
  ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
  {/*@bgen(jjtree) While */
    try {
/*@egen*/
    try
    {
      < WHILE > Exprtest() < LCHAVETA >
    }
    catch (ParseException e)
    {
      System.out.println("while Err:" + e.toString());
      Token t;
      do
      {
        t = getNextToken();
      }
      while (t.kind != LCHAVETA);
    }


        try
    {
      Stmtlst() < RCHAVETA >
    }
    catch (ParseException e)
    {
      System.out.println("while Err:" + e.toString());
      Token t;
      do
      {
        t = getNextToken();
      }
      while (t.kind != RCHAVETA);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
  }

  void If() :
  {/*@bgen(jjtree) If */
  ASTIf jjtn000 = new ASTIf(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
  {/*@bgen(jjtree) If */
    try {
/*@egen*/
    try
    {
      < IF > Exprtest() < LCHAVETA > Stmtlst() < RCHAVETA > (< ELSE > < LCHAVETA > Stmtlst() < RCHAVETA >) ?
    }
    catch (ParseException e)
    {
      System.out.println("if Err:" + e.toString());
      Token t;
      do
      {
        t = getNextToken();
      }
      while (t.kind != RCHAVETA);
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
  }

  void Call() :
  {/*@bgen(jjtree) Call */
    ASTCall jjtn000 = new ASTCall(JJTCALL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token outerCalledID = new Token();
    Token innerCalledID = new Token();
    innerCalledID.image = null;
  }
  {/*@bgen(jjtree) Call */
    try {
/*@egen*/
    try
    {
      outerCalledID = < ID > ("." innerCalledID = < ID >) ? < LPAR >
           (ArgumentList()) ? < RPAR >
      {
        jjtn000.outerCalledID = outerCalledID.image;
        jjtn000.innerCalledID = innerCalledID.image;
      }
    }
    catch (ParseException e)
    {
      System.out.println("call Err:" + e.toString());
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
  }

  void ArgumentList() :
  {/*@bgen(jjtree) ArgumentList */
  ASTArgumentList jjtn000 = new ASTArgumentList(JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
  {/*@bgen(jjtree) ArgumentList */
    try {
/*@egen*/
    try
    {
      Argument() (< VIRG > Argument()) *
    }
    catch (ParseException e)
    {
      System.out.println("ArgumentList Err:" + e.toString());
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
  }

  void Argument() :
  {/*@bgen(jjtree) Argument */
    ASTArgument jjtn000 = new ASTArgument(JJTARGUMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t1;
  }
  {/*@bgen(jjtree) Argument */
    try {
/*@egen*/
    try
    {
      (t1 = < ID >
      {
        jjtn000.id = t1.image;
      }
    | t1 = < STRING >
      {
        jjtn000.str = t1.image;
      }
    | t1 = < INTEGER >
      {
        jjtn000.intr = Integer.parseInt(t1.image);
      }
      )
    }
    catch (ParseException e)
    {
      System.out.println("Argument Err:" + e.toString());
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
  }

  void ArrayAccess() :
  {/*@bgen(jjtree) ArrayAccess */
    ASTArrayAccess jjtn000 = new ASTArrayAccess(JJTARRAYACCESS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token arrayID;
  }
  {/*@bgen(jjtree) ArrayAccess */
    try {
/*@egen*/
    try
    {
      arrayID = < ID > "[" Index() "]"
      {
        jjtn000.arrayID = arrayID.image;
      }
    }
    catch (ParseException e)
    {
      System.out.println("ArrayAccess Err:" + e.toString());
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
  }

  void ScalarAccess() :
  {/*@bgen(jjtree) ScalarAccess */
    ASTScalarAccess jjtn000 = new ASTScalarAccess(JJTSCALARACCESS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token id, size;
  }
  {/*@bgen(jjtree) ScalarAccess */
    try {
/*@egen*/
    try
    {
      id = < ID >
      {
        jjtn000.id = id.image;
      }
      ("." size = < SIZE >
      {
        jjtn000.size = size.image;
      }
      ) ?
    }
    catch (ParseException e)
    {
      System.out.println("ScalarAccess Err:" + e.toString());
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
  }

  void Index() :
  {/*@bgen(jjtree) Index */
    ASTIndex jjtn000 = new ASTIndex(JJTINDEX);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t1;
  }
  {/*@bgen(jjtree) Index */
    try {
/*@egen*/
    try
    {
      t1 = < ID >
      {
        jjtn000.id = t1.image;
      }
    | t1 = < INTEGER >
      {
        jjtn000.index = Integer.parseInt(t1.image);
      }
    }
    catch (ParseException e)
    {
      System.out.println("Index Err:" + e.toString());
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
  }